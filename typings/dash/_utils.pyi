"""
This type stub file was generated by pyright.
"""

logger = ...
_strings = ...
def interpolate_str(template, **data):
    ...

def format_tag(tag_name, attributes, inner=..., closed=..., opened=...):
    ...

def generate_hash():
    ...

def get_asset_path(requests_pathname, asset_path, asset_url_path):
    ...

def get_relative_path(requests_pathname, path):
    ...

def strip_relative_path(requests_pathname, path):
    ...

def patch_collections_abc(member):
    ...

class AttributeDict(dict):
    """Dictionary subclass enabling attribute lookup/assignment of keys/values.

    For example::
        >>> m = AttributeDict({'foo': 'bar'})
        >>> m.foo
        'bar'
        >>> m.foo = 'not bar'
        >>> m['foo']
        'not bar'
    ``AttributeDict`` objects also provide ``.first()`` which acts like
    ``.get()`` but accepts multiple keys as arguments, and returns the value of
    the first hit, e.g.::
        >>> m = AttributeDict({'foo': 'bar', 'biz': 'baz'})
        >>> m.first('wrong', 'incorrect', 'foo', 'biz')
        'bar'
    """
    def __setattr__(self, key, value):
        ...
    
    def __getattr__(self, key):
        ...
    
    def set_read_only(self, names, msg=...):
        ...
    
    def finalize(self, msg=...):
        """Prevent any new keys being set."""
        ...
    
    def __setitem__(self, key, val):
        ...
    
    def first(self, *names):
        ...
    


def create_callback_id(output):
    ...

def split_callback_id(callback_id):
    ...

def stringify_id(id_):
    ...

def inputs_to_dict(inputs_list):
    ...

def inputs_to_vals(inputs):
    ...

def run_command_with_process(cmd):
    ...

def compute_md5(path):
    ...

def job(msg=...):
    ...

