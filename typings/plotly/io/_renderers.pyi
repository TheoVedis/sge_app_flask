"""
This type stub file was generated by pyright.
"""

ipython = ...
ipython_display = ...
nbformat = ...
class RenderersConfig(object):
    """
    Singleton object containing the current renderer configurations
    """
    def __init__(self) -> None:
        ...
    
    def __len__(self):
        ...
    
    def __contains__(self, item):
        ...
    
    def __iter__(self):
        ...
    
    def __getitem__(self, item):
        ...
    
    def __setitem__(self, key, value):
        ...
    
    def __delitem__(self, key):
        ...
    
    def keys(self):
        ...
    
    def items(self):
        ...
    
    def update(self, d=..., **kwargs):
        """
        Update one or more renderers from a dict or from input keyword
        arguments.

        Parameters
        ----------
        d: dict
            Dictionary from renderer names to new renderer objects.

        kwargs
            Named argument value pairs where the name is a renderer name
            and the value is a new renderer object
        """
        ...
    
    @property
    def default(self):
        """
        The default renderer, or None if no there is no default

        If not None, the default renderer is used to render
        figures when the `plotly.io.show` function is called on a Figure.

        If `plotly.io.renderers.render_on_display` is True, then the default
        renderer will also be used to display Figures automatically when
        displayed in the Jupyter Notebook

        Multiple renderers may be registered by separating their names with
        '+' characters. For example, to specify rendering compatible with
        the classic Jupyter Notebook, JupyterLab, and PDF export:

        >>> import plotly.io as pio
        >>> pio.renderers.default = 'notebook+jupyterlab+pdf'

        The names of available renderers may be retrieved with:

        >>> import plotly.io as pio
        >>> list(pio.renderers)

        Returns
        -------
        str
        """
        ...
    
    @default.setter
    def default(self, value):
        ...
    
    @property
    def render_on_display(self):
        """
        If True, the default mimetype renderers will be used to render
        figures when they are displayed in an IPython context.

        Returns
        -------
        bool
        """
        ...
    
    @render_on_display.setter
    def render_on_display(self, val):
        ...
    
    def __repr__(self):
        ...
    


renderers = ...
def show(fig, renderer=..., validate=..., **kwargs):
    """
    Show a figure using either the default renderer(s) or the renderer(s)
    specified by the renderer argument

    Parameters
    ----------
    fig: dict of Figure
        The Figure object or figure dict to display

    renderer: str or None (default None)
        A string containing the names of one or more registered renderers
        (separated by '+' characters) or None.  If None, then the default
        renderers specified in plotly.io.renderers.default are used.

    validate: bool (default True)
        True if the figure should be validated before being shown,
        False otherwise.

    width: int or float
        An integer or float that determines the number of pixels wide the
        plot is. The default is set in plotly.js.

    height: int or float
        An integer or float that determines the number of pixels wide the
        plot is. The default is set in plotly.js.

    config: dict
        A dict of parameters to configure the figure. The defaults are set
        in plotly.js.

    Returns
    -------
    None
    """
    ...

plotly_renderer = ...
config = ...
img_kwargs = ...
jpeg_renderer = ...
default_renderer = ...
env_renderer = ...
if env_renderer:
    default_renderer = ...
else:
    ...
